Microsoft (R) Macro Assembler Version 14.27.29111.0	    01/23/21 05:02:42
main.asm						     Page 1 - 1


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				;SUDOKU SOLVER AND GAME

				Authentication0 PROTO, valt:DWORD
				Authentication1 PROTO, valt:DWORD
				checkGrid PROTO, rowNo:DWORD, colNo:DWORD
 00000000			.data
					;GRID-INFO:
 00000000 09				N BYTE 9
 00000001 00000000			score DWORD 0
 00000005  00000051 [			grid BYTE 81 DUP (?)
	    00
	   ]
 00000056  00000051 [			gridcopy BYTE 81 DUP (?)
	    00
	   ]
 000000A7  0000065E [			gridgame_tmp BYTE 1630 DUP(0)	;81 ELEMENTS, 80 SPACES (EACH LINE CONTAINS ONE SUDOKU-TOTAL 10 SUDOKUS) 
	    00
	   ]

					;BOOLEANS:
 00000705 00				bool1 BYTE ?
 00000706 00				bool2 BYTE ?
 00000707 00				mbool3 BYTE 0
 00000708 00				bool4 BYTE ?	 
 00000709 00				bool5 BYTE 0
 0000070A 00				bool6 BYTE 0

					;MESSAGES:
 0000070B 5C 5C 2D 2D 2D		end_msg BYTE "\\----- GAME IS NOW EXITING -----//", 0
	   2D 2D 20 47 41
	   4D 45 20 49 53
	   20 4E 4F 57 20
	   45 58 49 54 49
	   4E 47 20 2D 2D
	   2D 2D 2D 2F 2F
	   00
 0000072F 54 68 65 20 73		mesg BYTE "The solved grid is: ", 0
	   6F 6C 76 65 64
	   20 67 72 69 64
	   20 69 73 3A 20
	   00
 00000744 4E 6F 20 73 6F		msg BYTE "No solution exists for the given grid!", 0
	   6C 75 74 69 6F
	   6E 20 65 78 69
	   73 74 73 20 66
	   6F 72 20 74 68
	   65 20 67 69 76
	   65 6E 20 67 72
	   69 64 21 00
 0000076B 55 6E 73 6F 6C		msg2 BYTE "Unsolved Grid:", 0
	   76 65 64 20 47
	   72 69 64 3A 00
 0000077A 53 6F 6C 76 65		msg3 BYTE "Solved Grid:", 0
	   64 20 47 72 69
	   64 3A 00
 00000787 45 6E 74 65 72		msg4 BYTE "Enter the row no: ", 0
	   20 74 68 65 20
	   72 6F 77 20 6E
	   6F 3A 20 00
 0000079A 45 6E 74 65 72		msg5 BYTE "Enter the column no: ", 0
	   20 74 68 65 20
	   63 6F 6C 75 6D
	   6E 20 6E 6F 3A
	   20 00
 000007B0 45 6E 74 65 72		msg6 BYTE "Enter the value: ", 0
	   20 74 68 65 20
	   76 61 6C 75 65
	   3A 20 00
 000007C2 59 6F 75 20 57		msg7 BYTE "You Won!!!", 0
	   6F 6E 21 21 21
	   00
 000007CD 20 00				space BYTE ' ', 0
 000007CF 20 20 20 00			multiplespace BYTE "   ", 0
 000007D3 7C 20 00			vertical BYTE "| ", 0
 000007D6 2D 2D 2D 00			horizontal BYTE "---", 0
 000007DA 45 6E 74 65 72		rowmsg BYTE "Enter the elements for ROW-", 0
	   20 74 68 65 20
	   65 6C 65 6D 65
	   6E 74 73 20 66
	   6F 72 20 52 4F
	   57 2D 00
 000007F6 54 68 69 73 20		msgg BYTE "This is an INVALID VALUE! ", 0
	   69 73 20 61 6E
	   20 49 4E 56 41
	   4C 49 44 20 56
	   41 4C 55 45 21
	   20 00
 00000811 48 65 79 21 20		st_msg1 BYTE "Hey! I'm Shaggy!", 0
	   49 27 6D 20 53
	   68 61 67 67 79
	   21 00
 00000822 44 6F 20 59 6F		st_msg2 BYTE "Do You Wanna PLAY SUDOKU with me or LET me SOLVE one with you??", 0
	   75 20 57 61 6E
	   6E 61 20 50 4C
	   41 59 20 53 55
	   44 4F 4B 55 20
	   77 69 74 68 20
	   6D 65 20 6F 72
	   20 4C 45 54 20
	   6D 65 20 53 4F
	   4C 56 45 20 6F
	   6E 65 20 77 69
	   74 68 20 79 6F
	   75 3F 3F 00
 00000862 45 4E 54 45 52		st_msg3 BYTE "ENTER 0 TO START THE GAME", 0
	   20 30 20 54 4F
	   20 53 54 41 52
	   54 20 54 48 45
	   20 47 41 4D 45
	   00
 0000087C 45 4E 54 45 52		st_msg4 BYTE "ENTER 1 TO GET YOUR SUDOKU SOLVED", 0 
	   20 31 20 54 4F
	   20 47 45 54 20
	   59 4F 55 52 20
	   53 55 44 4F 4B
	   55 20 53 4F 4C
	   56 45 44 00
 0000089E 59 6F 75 72 20		st_msg5 BYTE "Your Option: ", 0
	   4F 70 74 69 6F
	   6E 3A 20 00
 000008AC 45 4E 54 45 52		st_msg6 BYTE "ENTER ANY KEY TO GO BACK TO THE MAIN MENU......", 0
	   20 41 4E 59 20
	   4B 45 59 20 54
	   4F 20 47 4F 20
	   42 41 43 4B 20
	   54 4F 20 54 48
	   45 20 4D 41 49
	   4E 20 4D 45 4E
	   55 2E 2E 2E 2E
	   2E 2E 00
 000008DC 57 6F 61 68 21		sc_msg BYTE "Woah! Your score is ", 0
	   20 59 6F 75 72
	   20 73 63 6F 72
	   65 20 69 73 20
	   00
					;FILE-HANDLING:
 000008F1 53 75 64 6F 6B		filename BYTE "Sudoku.txt", 0
	   75 2E 74 78 74
	   00
 000008FC 00000000			filehandle DWORD ?
					

 00000000			.code
 00000000				Authentication1 PROC USES edx, valt:DWORD		;checks whether the data is from 1 to 9
 00000000  55		   *	    push   ebp
 00000001  8B EC	   *	    mov    ebp, esp
 00000003  52		   *	    push   edx
 00000004  C6 05 0000070A R			MOV bool6, 0
	   00
 0000000B  8B 55 08				MOV edx, valt
 0000000E  83 FA 09				CMP edx, 9
 00000011  73 05				JNC J1
 00000013  83 FA 01				CMP edx, 1
 00000016  73 07				JNC J2

 00000018					J1:
 00000018  74 05				JZ J2
						RET
 0000001A  5A		   *	    pop    edx
 0000001B  C9		   *	    leave  
 0000001C  C2 0004	   *	    ret    00004h

 0000001F					J2:
 0000001F  C6 05 0000070A R			MOV bool6, 1	;TRUE
	   01
						RET
 00000026  5A		   *	    pop    edx
 00000027  C9		   *	    leave  
 00000028  C2 0004	   *	    ret    00004h
 0000002B				Authentication1 ENDP

 0000002B				Authentication0 PROC USES edx eax, valt:DWORD		;checks whether the data is from 0 to 9
 0000002B  55		   *	    push   ebp
 0000002C  8B EC	   *	    mov    ebp, esp
 0000002E  52		   *	    push   edx
 0000002F  50		   *	    push   eax
 00000030  C6 05 00000709 R			MOV bool5, 0
	   00
 00000037  8B 55 08				MOV edx, valt
 0000003A  83 FA 09				CMP edx, 9
 0000003D  73 05				JNC J1
 0000003F  83 FA 00				CMP edx, 0
 00000042  73 08				JNC J2

 00000044					J1:
 00000044  74 06				JZ J2
						RET
 00000046  58		   *	    pop    eax
 00000047  5A		   *	    pop    edx
 00000048  C9		   *	    leave  
 00000049  C2 0004	   *	    ret    00004h

 0000004C					J2:
 0000004C  C6 05 00000709 R			MOV bool5, 1	;TRUE
	   01
						RET
 00000053  58		   *	    pop    eax
 00000054  5A		   *	    pop    edx
 00000055  C9		   *	    leave  
 00000056  C2 0004	   *	    ret    00004h
 00000059				Authentication0 ENDP

 00000059				checkGrid PROC USES eax ebx esi, rowNo:DWORD, colNo:DWORD
 00000059  55		   *	    push   ebp
 0000005A  8B EC	   *	    mov    ebp, esp
 0000005C  50		   *	    push   eax
 0000005D  53		   *	    push   ebx
 0000005E  56		   *	    push   esi
 0000005F  C6 05 0000070A R			MOV bool6, 0
	   00
 00000066  BB 00000056 R			MOV ebx, OFFSET gridcopy
 0000006B  8B 45 08				MOV eax, rowNo
 0000006E  F6 25 00000000 R			MUL N
 00000074  03 D8				ADD ebx, eax
 00000076  8B 75 0C				MOV esi, colNo

 00000079  80 3C 33 00				cmp BYTE PTR [ebx+esi], 0
 0000007D  75 07				JNZ J1
 0000007F  C6 05 0000070A R				MOV bool6, 1
	   01
 00000086					J1:
						RET
 00000086  5E		   *	    pop    esi
 00000087  5B		   *	    pop    ebx
 00000088  58		   *	    pop    eax
 00000089  C9		   *	    leave  
 0000008A  C2 0008	   *	    ret    00008h
 0000008D				checkGrid endp

 0000008D				inputValues PROC USES eax esi edx ebx
						LOCAL rowNo:DWORD, colNo:DWORD, Value:DWORD
						
 0000008D  55		   *	    push   ebp
 0000008E  8B EC	   *	    mov    ebp, esp
 00000090  83 C4 F4	   *	    add    esp, 0FFFFFFF4h
 00000093  50		   *	    push   eax
 00000094  56		   *	    push   esi
 00000095  52		   *	    push   edx
 00000096  53		   *	    push   ebx
 00000097					L1:                          ; While Loop
 00000097  C7 45 FC					MOV rowNo, 0
	   00000000
 0000009E  C7 45 F8					MOV colNo, 0
	   00000000
 000000A5  8D 45 FC					LEA eax, rowNo
 000000A8  8D 5D F8					LEA ebx, colNo
						
 000000AB  50						PUSH eax
 000000AC  53						PUSH ebx
 000000AD  E8 000004AF					CALL findEmptyPlace
 000000B2  83 C4 08					ADD esp, 8

 000000B5  80 3D 00000706 R				CMP bool2, 1 ;empty place found
	   01
 000000BC  0F 85 0000011B				JNZ J3

 000000C2  BB 00000005 R				MOV ebx, OFFSET grid
 000000C7  BE 00000000					MOV esi, 0
 000000CC  BA 00000787 R				MOV edx, OFFSET msg4
 000000D1  E8 00000000 E				CALL WriteString
 000000D6  E8 00000000 E				CALL readDec
 000000DB  89 45 FC					MOV rowNo, eax
							INVOKE Authentication1, rowNo
 000000DE  FF 75 FC	   *	    push   dword  ptr ss:[ebp]+0FFFFFFFCh
 000000E1  E8 FFFFFF1A	   *	    call   Authentication1
 000000E6  80 3D 0000070A R				CMP bool6, 1
	   01
 000000ED  0F 85 000000C7				JNZ J1 
 000000F3  FF 4D FC					DEC rowNo

 000000F6  C6 05 00000709 R				MOV bool5, 0
	   00
 000000FD  C6 05 0000070A R				MOV bool6, 0
	   00
 00000104  BA 0000079A R				MOV edx, OFFSET msg5
 00000109  E8 00000000 E				CALL WriteString
 0000010E  E8 00000000 E				CALL readDec
 00000113  89 45 F8					MOV colNo, eax 
							INVOKE Authentication1, colNo
 00000116  FF 75 F8	   *	    push   dword  ptr ss:[ebp]+0FFFFFFF8h
 00000119  E8 FFFFFEE2	   *	    call   Authentication1
 0000011E  80 3D 0000070A R				CMP bool6, 1
	   01
 00000125  0F 85 0000008F				JNZ J1
 0000012B  FF 4D F8					DEC colNo 

 0000012E  FF 75 FC					PUSH rowNo
 00000131  FF 75 F8					PUSH colNo
							INVOKE checkGrid, rowNo, colNo
 00000134  FF 75 F8	   *	    push   dword  ptr ss:[ebp]+0FFFFFFF8h
 00000137  FF 75 FC	   *	    push   dword  ptr ss:[ebp]+0FFFFFFFCh
 0000013A  E8 FFFFFF1A	   *	    call   checkGrid
 0000013F  80 3D 0000070A R				CMP bool6, 1
	   01
 00000146  75 72					JNZ J1

 00000148  C6 05 0000070A R				MOV bool6, 0
	   00
 0000014F  C6 05 00000709 R				MOV bool5, 0
	   00
 00000156  BA 000007B0 R				MOV edx, OFFSET msg6
 0000015B  E8 00000000 E				CALL WriteString
 00000160  E8 00000000 E				CALL readDec
 00000165  89 45 F4					MOV Value, eax

 00000168  C6 05 00000708 R				MOV bool4, 0
	   00
 0000016F  FF 75 FC					PUSH rowNo
 00000172  FF 75 F8					PUSH colNo
 00000175  FF 75 F4					PUSH Value
 00000178  E8 00000376					CALL isvalidplace
 0000017D  83 C4 0C					ADD esp, 12
 00000180  80 3D 00000708 R				CMP bool4, 1
	   01
 00000187  75 31					JNZ J1
							
 00000189  8B 45 FC					MOV eax, rowNo
 0000018C  F6 25 00000000 R				MUL N
 00000192  03 D8					ADD ebx, eax
 00000194  8B 75 F8					MOV esi, colNo
 00000197  8B 45 F4					MOV eax, Value
							INVOKE Authentication1, eax
 0000019A  50		   *	    push   eax
 0000019B  E8 FFFFFE60	   *	    call   Authentication1
 000001A0  80 3D 0000070A R				CMP bool6, 1
	   01
 000001A7  75 11					JNZ J1				;The case of invalid
							
 000001A9  83 05 00000001 R				ADD score, 5
	   05
 000001B0  88 04 33					MOV BYTE PTR [ebx+esi], al
 000001B3  E8 00000173					CALL printGrid
 000001B8  EB 1E					JMP J2
							
 000001BA						J1:
 000001BA  E8 00000000 E				CALL crlf
 000001BF  BA 000007F6 R				MOV edx, OFFSET msgg
 000001C4  E8 00000000 E				CALL WriteString 
 000001C9  E8 00000000 E				CALL crlf
 000001CE  E8 00000000 E				CALL crlf
 000001D3  E8 00000153					CALL PrintGrid

 000001D8						J2:
 000001D8  E9 FFFFFEBA				JMP L1
						
 000001DD					J3:
 000001DD  C6 05 00000706 R			MOV bool2, 0
	   00
 000001E4  BA 000007C2 R			MOV edx, OFFSET msg7
 000001E9  E8 00000000 E			CALL crlf
 000001EE  E8 00000000 E			CALL writeString
 000001F3  BA 000008DC R			MOV edx, OFFSET sc_msg
 000001F8  E8 00000000 E			CALL crlf
 000001FD  E8 00000000 E			CALL crlf
 00000202  E8 00000000 E			CALL crlf
 00000207  E8 00000000 E			CALL WriteString
 0000020C  A1 00000001 R			MOV eax, score
 00000211  E8 00000000 E			CALL WriteDec

 00000216  E8 00000000 E			CALL crlf
 0000021B  E8 00000000 E			CALL crlf
 00000220  BA 000008AC R			MOV edx, OFFSET st_msg6
 00000225  E8 00000000 E			CALL WriteString
 0000022A  E8 00000000 E			CALL crlf
 0000022F  E8 00000000 E			CALL crlf
						
 00000234  E8 00000000 E			CALL readChar

						RET
 00000239  5B		   *	    pop    ebx
 0000023A  5A		   *	    pop    edx
 0000023B  5E		   *	    pop    esi
 0000023C  58		   *	    pop    eax
 0000023D  C9		   *	    leave  
 0000023E  C3		   *	    ret    00000h
 0000023F				inputValues ENDP

 0000023F				inputgrid PROC USES eax ebx ecx edx
						LOCAL var_counter: DWORD
 0000023F  55		   *	    push   ebp
 00000240  8B EC	   *	    mov    ebp, esp
 00000242  83 C4 FC	   *	    add    esp, 0FFFFFFFCh
 00000245  50		   *	    push   eax
 00000246  53		   *	    push   ebx
 00000247  51		   *	    push   ecx
 00000248  52		   *	    push   edx
 00000249  C7 45 FC				MOV var_counter, 0
	   00000000
 00000250  0F B6 0D				MOVZX ecx, N
	   00000000 R
 00000257  BB 00000005 R			MOV ebx, OFFSET grid
 0000025C  B8 00000000				MOV eax, 0
 00000261					L1:
 00000261  51						PUSH ecx
 00000262  BE 00000000					MOV esi, 0
 00000267  E8 000000BF					CALL PrintGrid
 0000026C  BA 000007DA R				MOV edx, OFFSET rowmsg 
 00000271  E8 00000000 E				CALL Writestring
 00000276  8B 45 FC					MOV eax, var_counter
 00000279  40						INC eax
 0000027A  E8 00000000 E				CALL WriteDec
 0000027F  0F B6 0D					MOVZX ecx, N
	   00000000 R
 00000286  E8 00000000 E				CALL crlf 
 0000028B						L2:
 0000028B  E8 00000000 E					CALL ReadInt
								INVOKE Authentication0, eax
 00000290  50		   *	    push   eax
 00000291  E8 FFFFFD95	   *	    call   Authentication0
 00000296  80 3D 00000709 R					CMP bool5, 1
	   01
 0000029D  75 2F						JNZ JM2

 0000029F  83 F8 00						CMP eax, 0
 000002A2  74 1D						JZ J1
 000002A4  FF 75 FC						PUSH var_counter
 000002A7  56							PUSH esi
 000002A8  50							PUSH eax
 000002A9  E8 00000245						CALL isvalidplace
 000002AE  83 C4 0C						ADD esp, 12
 000002B1  80 3D 00000708 R					CMP bool4, 1
	   01
 000002B8  75 14						JNZ JM2
 000002BA  C6 05 00000708 R					MOV bool4, 0
	   00
 000002C1							J1:
 000002C1  88 04 33						MOV BYTE PTR [ebx+esi], al
 000002C4  B8 00000000						MOV eax, 0
 000002C9  46							INC esi	;COL-INC
 000002CA  E2 BF						LOOP L2
 000002CC  EB 11						JMP JM3
 000002CE							JM2:
 000002CE  BA 000007F6 R					MOV edx, OFFSET msgg
 000002D3  E8 00000000 E					CALL WriteString 
 000002D8  E8 00000000 E					CALL crlf
 000002DD  EB AC					JMP L2
 000002DF						JM3:
 000002DF  FF 45 FC					INC var_counter
 000002E2  E8 00000000 E				CALL clrscr
 000002E7  0F B6 3D					MOVZX edi, N
	   00000000 R
 000002EE  03 DF					ADD ebx, edi		;ROW-JUMP
 000002F0  59						POP ecx
 000002F1  49						DEC ecx
 000002F2  83 F9 00					CMP ecx, 0
 000002F5  0F 85 FFFFFF66			JNZ L1
						RET
 000002FB  5A		   *	    pop    edx
 000002FC  59		   *	    pop    ecx
 000002FD  5B		   *	    pop    ebx
 000002FE  58		   *	    pop    eax
 000002FF  C9		   *	    leave  
 00000300  C3		   *	    ret    00000h
 00000301				inputgrid ENDP

 00000301				printHorizontalLine PROC USES ecx
 00000301  51		   *	    push   ecx
 00000302  55					PUSH ebp
 00000303  8B EC				MOV ebp, esp
 00000305  0F B6 0D				MOVZX ecx, N
	   00000000 R
 0000030C  49					DEC ecx
 0000030D  E8 00000000 E			CALL crlf
 00000312  BA 000007CF R			MOV edx, OFFSET multiplespace
 00000317  E8 00000000 E			CALL WriteString
 0000031C					L1:
 0000031C  BA 000007D6 R				MOV edx, OFFSET horizontal
 00000321  E8 00000000 E				CALL WriteString
 00000326  E2 F4				LOOP L1

 00000328  5D					POP ebp
						RET
 00000329  59		   *	    pop    ecx
 0000032A  C3		   *	    ret    00000h
 0000032B				printHorizontalLine ENDP

 0000032B				PrintGrid PROC USES eax edx ebx esi edi ecx
 0000032B  50		   *	    push   eax
 0000032C  52		   *	    push   edx
 0000032D  53		   *	    push   ebx
 0000032E  56		   *	    push   esi
 0000032F  57		   *	    push   edi
 00000330  51		   *	    push   ecx
 00000331  55					PUSH ebp
 00000332  8B EC				MOV ebp, esp

 00000334  E8 FFFFFFC8				CALL printHorizontalLine	
 00000339  E8 00000000 E			CALL crlf

 0000033E  BB 00000005 R			MOV ebx, OFFSET grid
 00000343  0F B6 0D				MOVZX ecx, N
	   00000000 R

 0000034A					l1:
 0000034A  8B F9					MOV edi, ecx
 0000034C  BE 00000000					MOV esi, 0
 00000351  0F B6 0D					MOVZX ecx, N
	   00000000 R
 00000358  BA 000007CF R				MOV edx, OFFSET multiplespace
 0000035D  E8 00000000 E				CALL WriteString
 00000362						l2:
 00000362  83 F9 06						CMP ecx, 6
 00000365  72 0C						JC J2
 00000367  75 19						JNZ J1
 00000369  BA 000007D3 R						MOV edx, OFFSET vertical
 0000036E  E8 00000000 E						CALL WriteString
 00000373							J2:
 00000373  83 F9 03						CMP ecx, 3
 00000376  75 0A						JNZ J1
 00000378  BA 000007D3 R						MOV edx, OFFSET vertical
 0000037D  E8 00000000 E						CALL WriteString
 00000382							J1:
 00000382  83 F9 09						CMP ecx, 9
 00000385  75 0A						JNZ J5
 00000387  BA 000007D3 R						MOV edx, OFFSET vertical
 0000038C  E8 00000000 E						CALL WriteString
 00000391							J5:

 00000391  0F B6 04 33						MOVZX eax, BYTE PTR [ebx+esi]
 00000395  E8 00000000 E					CALL WriteDec
 0000039A  BA 000007CD R					MOV edx, OFFSET space
 0000039F  E8 00000000 E					CALL WriteString
 000003A4  46							INC esi
								
 000003A5  83 F9 01						CMP ecx, 1
 000003A8  75 0A						JNZ J6
 000003AA  BA 000007D3 R						MOV edx, OFFSET vertical
 000003AF  E8 00000000 E						CALL WriteString
 000003B4							J6:
 000003B4  E2 AC					LOOP l2
 000003B6  0F B6 05					MOVZX eax, N
	   00000000 R
 000003BD  03 D8					ADD ebx, eax

 000003BF  83 FF 07					CMP edi, 7
 000003C2  72 07					JC J4
 000003C4  75 0F					JNZ J3
 000003C6  E8 FFFFFF36					CALL printHorizontalLine	
							
 000003CB						J4:
 000003CB  83 FF 04					CMP edi, 4
 000003CE  75 05					JNZ J3
 000003D0  E8 FFFFFF2C					CALL printHorizontalLine
 000003D5						J3:
							
 000003D5  83 FF 01					CMP edi, 1
 000003D8  75 05					JNZ J7
 000003DA  E8 FFFFFF22					CALL printHorizontalLine
 000003DF						J7:

 000003DF  E8 00000000 E				CALL crlf
 000003E4  8B CF					MOV ecx, edi
 000003E6  49						DEC ecx
 000003E7  83 F9 00					CMP ecx, 0
 000003EA  0F 85 FFFFFF5A			JNZ l1
 000003F0  5D					POP ebp
 000003F1  E8 00000000 E			CALL crlf
						RET
 000003F6  59		   *	    pop    ecx
 000003F7  5F		   *	    pop    edi
 000003F8  5E		   *	    pop    esi
 000003F9  5B		   *	    pop    ebx
 000003FA  5A		   *	    pop    edx
 000003FB  58		   *	    pop    eax
 000003FC  C3		   *	    ret    00000h
 000003FD				PrintGrid ENDP

 000003FD				isPresentIncol PROC USES ecx esi ebx eax edx
 000003FD  51		   *	    push   ecx
 000003FE  56		   *	    push   esi
 000003FF  53		   *	    push   ebx
 00000400  50		   *	    push   eax
 00000401  52		   *	    push   edx
 00000402  55					PUSH ebp
 00000403  8B EC				MOV ebp, esp
 00000405  0F B6 0D				MOVZX ecx, N
	   00000000 R
 0000040C  BB 00000005 R			MOV ebx, OFFSET grid
 00000411  8B 75 20				MOV esi, [ebp+32]	;COL-VALUE
 00000414  0F B6 55 1C				MOVZX edx, BYTE PTR [ebp+28]	;NUM-VALUE
 00000418					L1:
 00000418  51						PUSH ecx
 00000419  0F B6 0D					MOVZX ecx, N
	   00000000 R
 00000420  38 14 33					CMP BYTE PTR [ebx+esi], dl
 00000423  74 0C					JZ J2
 00000425  03 D9					ADD ebx, ecx		;row-jump
 00000427  59						POP ecx
 00000428  E2 EE				LOOP L1

 0000042A  5D					POP ebp
						RET
 0000042B  5A		   *	    pop    edx
 0000042C  58		   *	    pop    eax
 0000042D  5B		   *	    pop    ebx
 0000042E  5E		   *	    pop    esi
 0000042F  59		   *	    pop    ecx
 00000430  C3		   *	    ret    00000h

 00000431					J2:
 00000431  59						POP ecx
 00000432  FE 05 00000707 R				INC mbool3
 00000438  5D						POP ebp
							RET
 00000439  5A		   *	    pop    edx
 0000043A  58		   *	    pop    eax
 0000043B  5B		   *	    pop    ebx
 0000043C  5E		   *	    pop    esi
 0000043D  59		   *	    pop    ecx
 0000043E  C3		   *	    ret    00000h
 0000043F				isPresentIncol ENDP

 0000043F				isPresentInrow PROC USES ecx esi ebx eax edx
 0000043F  51		   *	    push   ecx
 00000440  56		   *	    push   esi
 00000441  53		   *	    push   ebx
 00000442  50		   *	    push   eax
 00000443  52		   *	    push   edx
 00000444  55					PUSH ebp
 00000445  8B EC				MOV ebp, esp
 00000447  0F B6 0D				MOVZX ecx, N
	   00000000 R
 0000044E  BB 00000005 R			MOV ebx, OFFSET grid			
 00000453  8B 45 20				MOV eax, [ebp+32] ;row			
 00000456  F6 25 00000000 R			MUL N		
 0000045C  03 D8				ADD ebx, eax			
 0000045E  BE 00000000				MOV esi, 0	;    COL-VALUE
 00000463  0F B6 55 1C				MOVZX edx, BYTE PTR [ebp+28]	;NUM-VALUE	
 00000467					L1:
 00000467  51						PUSH ecx
 00000468  0F B6 0D					MOVZX ecx, N
	   00000000 R
 0000046F  38 14 33					CMP BYTE PTR [ebx+esi], dl
 00000472  74 0B					JZ J2
 00000474  46						INC esi			;COL-INC
 00000475  59						POP ecx
 00000476  E2 EF				LOOP L1

 00000478  5D					POP ebp
						RET
 00000479  5A		   *	    pop    edx
 0000047A  58		   *	    pop    eax
 0000047B  5B		   *	    pop    ebx
 0000047C  5E		   *	    pop    esi
 0000047D  59		   *	    pop    ecx
 0000047E  C3		   *	    ret    00000h

 0000047F					J2:
 0000047F  59						POP ecx
 00000480  FE 05 00000707 R				INC mbool3
 00000486  5D						POP ebp
							RET
 00000487  5A		   *	    pop    edx
 00000488  58		   *	    pop    eax
 00000489  5B		   *	    pop    ebx
 0000048A  5E		   *	    pop    esi
 0000048B  59		   *	    pop    ecx
 0000048C  C3		   *	    ret    00000h
 0000048D				isPresentInrow ENDP
					
 0000048D				isPresentInBox PROC USES ecx esi ebx eax edx edi
 0000048D  51		   *	    push   ecx
 0000048E  56		   *	    push   esi
 0000048F  53		   *	    push   ebx
 00000490  50		   *	    push   eax
 00000491  52		   *	    push   edx
 00000492  57		   *	    push   edi
 00000493  55					PUSH ebp
 00000494  8B EC				MOV ebp, esp
 00000496  BB 00000005 R			MOV ebx, OFFSET grid			
 0000049B  BE 00000000				MOV esi, 0

 000004A0  0F B6 45 28				MOVZX eax, BYTE PTR [ebp+40]		;row-row%3		
 000004A4  0F B6 7D 20				MOVZX edi, BYTE PTR [ebp+32]		;EDI = NUM
 000004A8  B9 00000003				MOV ecx,  3
 000004AD  F6 25 00000000 R			MUL N								;eax
 000004B3  8B 55 24				MOV edx, [ebp+36]					;col-col%3
 000004B6  03 D8				ADD ebx, eax

 000004B8					L1:
 000004B8  51						PUSH ecx
 000004B9  B9 00000003					MOV ecx, 3
 000004BE  8B F2					MOV esi, edx
 000004C0						L2:
 000004C0  51							PUSH ecx
 000004C1  0F B6 0C 33						MOVZX ecx, BYTE PTR [ebx+esi] 
 000004C5  3B F9						CMP edi, ecx
 000004C7  74 1A						JZ J1
 000004C9  59							POP ecx
 000004CA  46							INC esi
 000004CB  E2 F3					loop L2
 000004CD  52						PUSH edx
 000004CE  0F B6 15					MOVZX edx, N
	   00000000 R
 000004D5  03 DA					ADD ebx, edx		;OFFSET+9 (For next row)
 000004D7  5A						POP edx
 000004D8  59						POP ecx
 000004D9  E2 DD				loop L1
						
 000004DB  5D					POP ebp
						RET
 000004DC  5F		   *	    pop    edi
 000004DD  5A		   *	    pop    edx
 000004DE  58		   *	    pop    eax
 000004DF  5B		   *	    pop    ebx
 000004E0  5E		   *	    pop    esi
 000004E1  59		   *	    pop    ecx
 000004E2  C3		   *	    ret    00000h

 000004E3					J1:
 000004E3  FE 05 00000707 R				INC mbool3
 000004E9  59						POP ecx
 000004EA  59						POP ecx
 000004EB  5D						POP ebp
						RET
 000004EC  5F		   *	    pop    edi
 000004ED  5A		   *	    pop    edx
 000004EE  58		   *	    pop    eax
 000004EF  5B		   *	    pop    ebx
 000004F0  5E		   *	    pop    esi
 000004F1  59		   *	    pop    ecx
 000004F2  C3		   *	    ret    00000h
 000004F3				isPresentInBox ENDP

 000004F3				isValidPlace PROC
 000004F3  50					PUSH eax
 000004F4  52					PUSH edx
 000004F5  56					PUSH esi
 000004F6  55					PUSH ebp
 000004F7  8B EC				MOV ebp, esp
 000004F9  C6 05 00000707 R			mov mbool3, 0
	   00

 00000500  FF 75 1C				PUSH DWORD PTR [ebp+28] ;ROW
 00000503  FF 75 14				PUSH DWORD PTR [ebp+20] ;NUM
 00000506  E8 FFFFFF34				call isPresentInRow
 0000050B  83 C4 08				add esp, 8
						
 0000050E  FF 75 18				PUSH [ebp+24] ;COL
 00000511  FF 75 14				PUSH [ebp+20] ;NUM
 00000514  E8 FFFFFEE4				call isPresentInCol
 00000519  83 C4 08				add esp, 8

 0000051C  BE 00000003				MOV esi, 3
 00000521  BA 00000000				MOV edx, 0
 00000526  8B 45 1C				MOV eax, [ebp+28]
 00000529  F7 F6				DIV esi
 0000052B  8B 45 1C				MOV eax, [ebp+28]
 0000052E  2B C2				SUB eax, edx
 00000530  50					PUSH eax				;row- (row%3)

 00000531  BA 00000000				mov edx, 0
 00000536  8B 45 18				mov eax, [ebp+24]
 00000539  F7 F6				DIV esi
 0000053B  8B 45 18				MOV eax, [ebp+24]
 0000053E  2B C2				SUB eax, edx

 00000540  50					PUSH eax				;col- (col%3)
 00000541  FF 75 14				PUSH [ebp+20]			;NUM
 00000544  E8 FFFFFF44				CALL isPresentInBox
 00000549  83 C4 0C				ADD esp, 12

 0000054C  80 3D 00000707 R			CMP mbool3, 0
	   00
 00000553  75 07				JNZ J1
 00000555  C6 05 00000708 R			MOV bool4, 1
	   01
 0000055C					J1:
 0000055C  5D					POP ebp
 0000055D  5E					POP esi
 0000055E  5A					POP edx
 0000055F  58					POP eax
 00000560  C3					RET
 00000561				isValidPlace ENDP

 00000561				findEmptyPlace PROC USES edx esi edi ebx eax ecx			;return address at ebp+28
 00000561  52		   *	    push   edx
 00000562  56		   *	    push   esi
 00000563  57		   *	    push   edi
 00000564  53		   *	    push   ebx
 00000565  50		   *	    push   eax
 00000566  51		   *	    push   ecx
 00000567  55					PUSH ebp
 00000568  8B EC				MOV ebp, esp
 0000056A  BB 00000005 R			MOV ebx, OFFSET grid

 0000056F  8B 45 24				MOV eax, [ebp+36]			;row-address
 00000572  8B 55 20				MOV edx, [ebp+32]			;col-address
 00000575  C7 00 00000000			MOV DWORD PTR [eax], 0 ;row
 0000057B  C7 02 00000000			MOV DWORD PTR [edx], 0  ;col
					
 00000581  0F B6 0D				MOVZX ecx, N
	   00000000 R
 00000588					L1:
 00000588  51						PUSH ecx
 00000589  BE 00000000					MOV esi, 0

 0000058E  C6 02 00					MOV BYTE PTR [edx], 0

 00000591  0F B6 0D					MOVZX ecx, N
	   00000000 R
 00000598						L2:
 00000598  80 3C 33 00						CMP BYTE PTR [ebx+esi], 0
 0000059C  74 22						JZ ST1
 0000059E  46							INC esi
 0000059F  FE 02						INC BYTE PTR [edx]
 000005A1  E2 F5					LOOP L2
 000005A3  0F B6 3D					MOVZX edi, N
	   00000000 R
 000005AA  03 DF					ADD ebx, edi
 000005AC  FE 00					INC BYTE PTR [eax]
 000005AE  59						POP ecx
 000005AF  E2 D7				LOOP L1
 000005B1  5D					POP ebp
 000005B2  C6 05 00000706 R			MOV bool2, 0	;FALSE
	   00
						RET
 000005B9  59		   *	    pop    ecx
 000005BA  58		   *	    pop    eax
 000005BB  5B		   *	    pop    ebx
 000005BC  5F		   *	    pop    edi
 000005BD  5E		   *	    pop    esi
 000005BE  5A		   *	    pop    edx
 000005BF  C3		   *	    ret    00000h
				 
 000005C0					ST1:
 000005C0  59					POP ecx
 000005C1  5D					POP ebp
 000005C2  C6 05 00000706 R			MOV bool2, 1	;TRUE
	   01
						RET
 000005C9  59		   *	    pop    ecx
 000005CA  58		   *	    pop    eax
 000005CB  5B		   *	    pop    ebx
 000005CC  5F		   *	    pop    edi
 000005CD  5E		   *	    pop    esi
 000005CE  5A		   *	    pop    edx
 000005CF  C3		   *	    ret    00000h
 000005D0				findEmptyPlace ENDP

 000005D0				SolveSudoku PROC USES eax ebx esi edi edx
 000005D0  50		   *	    push   eax
 000005D1  53		   *	    push   ebx
 000005D2  56		   *	    push   esi
 000005D3  57		   *	    push   edi
 000005D4  52		   *	    push   edx
 000005D5  55					PUSH ebp
 000005D6  8B EC				mov ebp, esp
 000005D8  83 EC 0C				sub esp, 12
 000005DB  8D 45 FC				lea eax, [ebp-4] ; row
 000005DE  8D 5D F8				lea ebx, [ebp-8] ; col
						
 000005E1  50					PUSH eax
 000005E2  53					PUSH ebx
 000005E3  E8 FFFFFF79				CALL findEmptyPlace
 000005E8  83 C4 08				ADD esp, 8

 000005EB  80 3D 00000706 R			CMP bool2, 1 ;empty place found
	   01
 000005F2  74 10				JZ J1 
 000005F4  C6 05 00000705 R			MOV bool1, 1	;TRUE
	   01
 000005FB  8B E5				MOV esp, ebp
 000005FD  5D					POP ebp
						RET
 000005FE  5A		   *	    pop    edx
 000005FF  5F		   *	    pop    edi
 00000600  5E		   *	    pop    esi
 00000601  5B		   *	    pop    ebx
 00000602  58		   *	    pop    eax
 00000603  C3		   *	    ret    00000h

 00000604					J1:  
 00000604  C6 05 00000706 R			MOV bool2, 0
	   00
 0000060B  C7 45 F4				MOV DWORD PTR [ebp-12], 1 ;try each number
	   00000001
 00000612  0F B6 0D				MOVZX ecx, N
	   00000000 R
 00000619					L1:
 00000619  FF 30					PUSH [eax]	;row
 0000061B  FF 33					PUSH [ebx]	;col
 0000061D  FF 75 F4					PUSH DWORD PTR [ebp-12]
 00000620  E8 FFFFFECE					CALL isValidPlace
 00000625  83 C4 0C					ADD esp, 12
							
 00000628  80 3D 00000708 R				CMP bool4, 1
	   01
 0000062F  75 4E					JNZ ST1
 00000631  C6 05 00000708 R				MOV bool4, 0
	   00
 00000638  50						PUSH eax
 00000639  BF 00000005 R				MOV edi, OFFSET grid
 0000063E  8B 00					MOV eax, [eax]			;row
 00000640  8B 33					MOV esi, [ebx]			;col
 00000642  F6 25 00000000 R				MUL N
 00000648  03 F8					ADD edi, eax
 0000064A  8B 55 F4					MOV edx, DWORD PTR [ebp-12]
 0000064D  88 14 37					MOV BYTE PTR [edi+esi], dl
 00000650  58						POP eax
							
 00000651  C6 05 00000705 R				MOV bool1, 0
	   00
 00000658  51						PUSH ecx
 00000659  E8 FFFFFF72					CALL SolveSudoku
 0000065E  59						POP ecx
 0000065F  80 3D 00000705 R				CMP bool1, 1
	   01
 00000666  74 2F					JZ ST2

 00000668  50						PUSH eax	
 00000669  BF 00000005 R				MOV edi, OFFSET grid
 0000066E  8B 00					MOV eax, [eax]			;row
 00000670  8B 33					MOV esi, [ebx]			;col
 00000672  F6 25 00000000 R				MUL N
 00000678  03 F8					ADD edi, eax
 0000067A  C6 04 37 00					MOV BYTE PTR [edi+esi], 0
 0000067E  58						POP eax

 0000067F						ST1: 
 0000067F  FF 45 F4					INC DWORD PTR [ebp-12]
 00000682  8B 7D F4					mov edi, DWORD PTR [ebp-12]
 00000685  E2 92				LOOP L1

 00000687  8B E5				mov esp, ebp
 00000689  5D					POP ebp
 0000068A  C6 05 00000705 R			MOV bool1, 0	;FALSE
	   00
						RET
 00000691  5A		   *	    pop    edx
 00000692  5F		   *	    pop    edi
 00000693  5E		   *	    pop    esi
 00000694  5B		   *	    pop    ebx
 00000695  58		   *	    pop    eax
 00000696  C3		   *	    ret    00000h

 00000697					ST2:
 00000697  8B E5				mov esp, ebp
 00000699  5D					POP ebp
						RET
 0000069A  5A		   *	    pop    edx
 0000069B  5F		   *	    pop    edi
 0000069C  5E		   *	    pop    esi
 0000069D  5B		   *	    pop    ebx
 0000069E  58		   *	    pop    eax
 0000069F  C3		   *	    ret    00000h
 000006A0				SolveSudoku ENDP
					
 000006A0				ReadTheGrid PROC USES ecx edx eax esi edi ebx
 000006A0  51		   *	    push   ecx
 000006A1  52		   *	    push   edx
 000006A2  50		   *	    push   eax
 000006A3  56		   *	    push   esi
 000006A4  57		   *	    push   edi
 000006A5  53		   *	    push   ebx
 000006A6  55					PUSH ebp
 000006A7  8B EC				MOV ebp, esp
						
 000006A9  C7 05 00000001 R			MOV score, 0
	   00000000
 000006B3  BA 000008F1 R			MOV edx, OFFSET filename
 000006B8  E8 00000000 E			CALL OpenInputFile
 000006BD  A3 000008FC R			MOV filehandle, eax
 000006C2  B9 0000065E				MOV ecx, SIZEOF gridgame_tmp
 000006C7  BA 000000A7 R			MOV edx, OFFSET gridgame_tmp
 000006CC  E8 00000000 E			CALL ReadFromFile

 000006D1  BB 000000A7 R			MOV ebx, OFFSET	gridgame_tmp
 000006D6  0F B6 05				MOVZX eax, N				;UPPER BOUND FOR PSEUDO-RANDOM NUMBER
	   00000000 R
 000006DD  E8 00000000 E			CALL Randomize
 000006E2  E8 00000000 E			CALL RandomRange			;RANDOM NUMBER IN eax
 000006E7  0F B6 0D				MOVZX ecx, N
	   00000000 R
 000006EE  BA 00000000				MOV edx, 0
 000006F3					RANDGRID:
 000006F3  3B D0					CMP edx, eax
 000006F5  74 09					JE ASS1
 000006F7  81 C3 000000A3				ADD ebx, 163
 000006FD  42						INC edx
 000006FE  E2 F3				LOOP RANDGRID

						;transfering the values of the randomly selected grid without spaces
 00000700					ASS1:
 00000700  8B F3				MOV esi, ebx
 00000702  B9 00000051				MOV ecx, LENGTHOF grid
 00000707  BF 00000005 R			MOV edi, OFFSET grid
 0000070C  FC					CLD
 0000070D					L2:
 0000070D  A4						MOVSB
 0000070E  46						INC esi
 0000070F  E2 FC				LOOP L2

 00000711  BE 00000005 R			MOV esi, OFFSET grid

 00000716  B9 00000051				MOV ecx, LENGTHOF gridcopy
 0000071B  BF 00000056 R			MOV edi, OFFSET gridcopy
 00000720  FC					CLD
 00000721					L3:
 00000721  A4						MOVSB
 00000722  E2 FD				LOOP L3

 00000724  B9 00000051				MOV ecx, LENGTHOF grid
 00000729  BE 00000005 R			MOV esi, OFFSET grid
 0000072E  BF 00000056 R			MOV edi, OFFSET gridcopy
 00000733					L1:
 00000733  80 2E 30					SUB BYTE PTR [esi], 48
 00000736  46						INC esi
 00000737  80 2F 30					SUB BYTE PTR [edi], 48
 0000073A  47						INC edi
 0000073B  E2 F6				LOOP L1

 0000073D  5D					POP ebp
						RET
 0000073E  5B		   *	    pop    ebx
 0000073F  5F		   *	    pop    edi
 00000740  5E		   *	    pop    esi
 00000741  58		   *	    pop    eax
 00000742  5A		   *	    pop    edx
 00000743  59		   *	    pop    ecx
 00000744  C3		   *	    ret    00000h
 00000745				ReadTheGrid ENDP

 00000745				PlayGame PROC
 00000745  C8 0001 00				ENTER 1, 0
 00000749  E8 FFFFFF52				CALL ReadTheGrid
 0000074E  E8 FFFFFBD8				CALL PrintGrid
 00000753  E8 FFFFF935				CALL inputValues
						
 00000758  C9					LEAVE
 00000759  C3					RET
 0000075A				PlayGame ENDP

 0000075A				initialisegrid PROC USES ecx edi eax
 0000075A  51		   *	    push   ecx
 0000075B  57		   *	    push   edi
 0000075C  50		   *	    push   eax
 0000075D  55					PUSH ebp
 0000075E  B8 00000000				MOV eax, 0
 00000763  B9 00000051				MOV ecx, SIZE grid
 00000768  BF 00000005 R			MOV edi, OFFSET grid
 0000076D  FC					CLD
 0000076E  F3/ AA				REP STOSB
 00000770  5D					POP ebp
						RET
 00000771  58		   *	    pop    eax
 00000772  5F		   *	    pop    edi
 00000773  59		   *	    pop    ecx
 00000774  C3		   *	    ret    00000h
 00000775				initialisegrid ENDP

 00000775				SudokuSolver PROC USES edx
 00000775  52		   *	    push   edx
 00000776  55					PUSH ebp
 00000777  8B EC				MOV ebp, esp

 00000779  E8 FFFFFAC1				CALL inputgrid
 0000077E  E8 FFFFFE4D				CALL SolveSudoku
 00000783  80 3D 00000705 R			CMP bool1, 1
	   01
 0000078A  75 1B				JNZ ST2
 0000078C  BA 0000072F R			MOV edx, OFFSET mesg
 00000791  E8 00000000 E			CALL WriteString
 00000796  E8 00000000 E			CALL crlf
 0000079B  E8 00000000 E			CALL crlf
 000007A0  E8 FFFFFB86				CALL PrintGrid
 000007A5  EB 14				JMP ST3
					
 000007A7					ST2:
 000007A7  BA 00000744 R				MOV edx, OFFSET msg
 000007AC  E8 00000000 E				CALL WriteString
 000007B1  E8 00000000 E			CALL crlf
 000007B6  E8 00000000 E				CALL crlf

 000007BB					ST3:
 000007BB  E8 00000000 E			CALL crlf
 000007C0  E8 00000000 E			CALL crlf
 000007C5  BA 000008AC R			MOV edx, OFFSET st_msg6
 000007CA  E8 00000000 E			CALL WriteString
 000007CF  E8 00000000 E			CALL crlf
 000007D4  E8 00000000 E			CALL crlf
						
 000007D9  E8 00000000 E			CALL readChar

 000007DE  5D					POP ebp
						RET
 000007DF  5A		   *	    pop    edx
 000007E0  C3		   *	    ret    00000h
 000007E1				SudokuSolver ENDP

 000007E1				WelcomeInterface PROC USES ebx edx
 000007E1  53		   *	    push   ebx
 000007E2  52		   *	    push   edx
 000007E3  55					PUSH ebp
 000007E4  8B EC				MOV ebp, esp
 000007E6  B8 00000010				MOV eax, 16
 000007EB  B3 0F				MOV bl, 15
 000007ED  F6 E3				MUL bl
 000007EF  E8 00000000 E			CALL SetTextColor
 000007F4  E8 00000000 E			CALL clrscr

 000007F9  BA 00000811 R			MOV edx, OFFSET st_msg1
 000007FE  E8 00000000 E			CALL WriteString
 00000803  E8 00000000 E			CALL crlf

 00000808  BA 00000822 R			MOV edx, OFFSET st_msg2
 0000080D  E8 00000000 E			CALL WriteString
 00000812  E8 00000000 E			CALL crlf

 00000817  BA 00000862 R			MOV edx, OFFSET st_msg3
 0000081C  E8 00000000 E			CALL WriteString
 00000821  E8 00000000 E			CALL crlf

 00000826  BA 0000087C R			MOV edx, OFFSET st_msg4
 0000082B  E8 00000000 E			CALL WriteString
 00000830  E8 00000000 E			CALL crlf

 00000835  BA 0000089E R			MOV edx, OFFSET st_msg5
 0000083A  E8 00000000 E			CALL WriteString
 0000083F  B8 00000000				MOV eax, 0
 00000844  E8 00000000 E			CALL ReadInt
 00000849  E8 00000000 E			CALL clrscr

 0000084E  5D					POP ebp
						RET
 0000084F  5A		   *	    pop    edx
 00000850  5B		   *	    pop    ebx
 00000851  C3		   *	    ret    00000h
 00000852				WelcomeInterface ENDP


					;ENTERING-POINT:
 00000852				main PROC USES eax ebx edx ecx
 00000852  50		   *	    push   eax
 00000853  53		   *	    push   ebx
 00000854  52		   *	    push   edx
 00000855  51		   *	    push   ecx
 00000856  C8 0000 00				ENTER 0, 0
 0000085A					L1:
 0000085A  E8 FFFFFF82					CALL WelcomeInterface
							;USER'S CHOICE IS RETURNING IN EAX
 0000085F  83 F8 00					CMP eax, 0
 00000862  75 07					JNZ J1

							;MODULE FOR THE SUDOKU-PLAYER (SUDOKU-GAME)
 00000864  E8 FFFFFEDC					CALL PlayGame		
 00000869  EB 11					JMP J2

 0000086B						J1:
 0000086B  83 F8 01					CMP eax, 1
 0000086E  75 0C					JNZ J2
						
							;MODULE FOR USER-GIVEN SUDOKU (SUDOKU-SOLVER)
 00000870  E8 FFFFFEE5					CALL initialisegrid
 00000875  E8 FFFFFEFB					CALL SudokuSolver
						
 0000087A  E2 DE				Loop L1
 0000087C					J2:
 0000087C  E8 00000000 E			CALL crlf
 00000881  E8 00000000 E			CALL crlf
 00000886  BA 0000070B R			MOV edx, OFFSET end_msg
 0000088B  E8 00000000 E			CALL crlf
 00000890  E8 00000000 E			CALL WriteString
 00000895  E8 00000000 E			CALL crlf
 0000089A  C9					LEAVE
						EXIT
 0000089B  6A 00	   *	    push   +000000000h
 0000089D  E8 00000000 E   *	    call   ExitProcess
						RET
 000008A2  59		   *	    pop    ecx
 000008A3  5A		   *	    pop    edx
 000008A4  5B		   *	    pop    ebx
 000008A5  58		   *	    pop    eax
 000008A6  C3		   *	    ret    00000h
 000008A7				main ENDP
				END MAIN
Microsoft (R) Macro Assembler Version 14.27.29111.0	    01/23/21 05:02:42
main.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000900 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000008A7 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

Authentication0  . . . . . . . .	P Near	 0000002B _TEXT	Length= 0000002E Public STDCALL
  valt . . . . . . . . . . . . .	DWord	 bp + 00000008
  J1 . . . . . . . . . . . . . .	L Near	 00000044 _TEXT	
  J2 . . . . . . . . . . . . . .	L Near	 0000004C _TEXT	
Authentication1  . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000002B Public STDCALL
  valt . . . . . . . . . . . . .	DWord	 bp + 00000008
  J1 . . . . . . . . . . . . . .	L Near	 00000018 _TEXT	
  J2 . . . . . . . . . . . . . .	L Near	 0000001F _TEXT	
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PlayGame . . . . . . . . . . . .	P Near	 00000745 _TEXT	Length= 00000015 Public STDCALL
PrintGrid  . . . . . . . . . . .	P Near	 0000032B _TEXT	Length= 000000D2 Public STDCALL
  l1 . . . . . . . . . . . . . .	L Near	 0000034A _TEXT	
  l2 . . . . . . . . . . . . . .	L Near	 00000362 _TEXT	
  J2 . . . . . . . . . . . . . .	L Near	 00000373 _TEXT	
  J1 . . . . . . . . . . . . . .	L Near	 00000382 _TEXT	
  J5 . . . . . . . . . . . . . .	L Near	 00000391 _TEXT	
  J6 . . . . . . . . . . . . . .	L Near	 000003B4 _TEXT	
  J4 . . . . . . . . . . . . . .	L Near	 000003CB _TEXT	
  J3 . . . . . . . . . . . . . .	L Near	 000003D5 _TEXT	
  J7 . . . . . . . . . . . . . .	L Near	 000003DF _TEXT	
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadTheGrid  . . . . . . . . . .	P Near	 000006A0 _TEXT	Length= 000000A5 Public STDCALL
  RANDGRID . . . . . . . . . . .	L Near	 000006F3 _TEXT	
  ASS1 . . . . . . . . . . . . .	L Near	 00000700 _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 0000070D _TEXT	
  L3 . . . . . . . . . . . . . .	L Near	 00000721 _TEXT	
  L1 . . . . . . . . . . . . . .	L Near	 00000733 _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SolveSudoku  . . . . . . . . . .	P Near	 000005D0 _TEXT	Length= 000000D0 Public STDCALL
  J1 . . . . . . . . . . . . . .	L Near	 00000604 _TEXT	
  L1 . . . . . . . . . . . . . .	L Near	 00000619 _TEXT	
  ST1  . . . . . . . . . . . . .	L Near	 0000067F _TEXT	
  ST2  . . . . . . . . . . . . .	L Near	 00000697 _TEXT	
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SudokuSolver . . . . . . . . . .	P Near	 00000775 _TEXT	Length= 0000006C Public STDCALL
  ST2  . . . . . . . . . . . . .	L Near	 000007A7 _TEXT	
  ST3  . . . . . . . . . . . . .	L Near	 000007BB _TEXT	
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WelcomeInterface . . . . . . . .	P Near	 000007E1 _TEXT	Length= 00000071 Public STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
checkGrid  . . . . . . . . . . .	P Near	 00000059 _TEXT	Length= 00000034 Public STDCALL
  rowNo  . . . . . . . . . . . .	DWord	 bp + 00000008
  colNo  . . . . . . . . . . . .	DWord	 bp + 0000000C
  J1 . . . . . . . . . . . . . .	L Near	 00000086 _TEXT	
findEmptyPlace . . . . . . . . .	P Near	 00000561 _TEXT	Length= 0000006F Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 00000588 _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 00000598 _TEXT	
  ST1  . . . . . . . . . . . . .	L Near	 000005C0 _TEXT	
initialisegrid . . . . . . . . .	P Near	 0000075A _TEXT	Length= 0000001B Public STDCALL
inputValues  . . . . . . . . . .	P Near	 0000008D _TEXT	Length= 000001B2 Public STDCALL
  rowNo  . . . . . . . . . . . .	DWord	 bp - 00000004
  colNo  . . . . . . . . . . . .	DWord	 bp - 00000008
  Value  . . . . . . . . . . . .	DWord	 bp - 0000000C
  L1 . . . . . . . . . . . . . .	L Near	 00000097 _TEXT	
  J1 . . . . . . . . . . . . . .	L Near	 000001BA _TEXT	
  J2 . . . . . . . . . . . . . .	L Near	 000001D8 _TEXT	
  J3 . . . . . . . . . . . . . .	L Near	 000001DD _TEXT	
inputgrid  . . . . . . . . . . .	P Near	 0000023F _TEXT	Length= 000000C2 Public STDCALL
  var_counter  . . . . . . . . .	DWord	 bp - 00000004
  L1 . . . . . . . . . . . . . .	L Near	 00000261 _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 0000028B _TEXT	
  J1 . . . . . . . . . . . . . .	L Near	 000002C1 _TEXT	
  JM2  . . . . . . . . . . . . .	L Near	 000002CE _TEXT	
  JM3  . . . . . . . . . . . . .	L Near	 000002DF _TEXT	
isPresentInBox . . . . . . . . .	P Near	 0000048D _TEXT	Length= 00000066 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 000004B8 _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 000004C0 _TEXT	
  J1 . . . . . . . . . . . . . .	L Near	 000004E3 _TEXT	
isPresentIncol . . . . . . . . .	P Near	 000003FD _TEXT	Length= 00000042 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 00000418 _TEXT	
  J2 . . . . . . . . . . . . . .	L Near	 00000431 _TEXT	
isPresentInrow . . . . . . . . .	P Near	 0000043F _TEXT	Length= 0000004E Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 00000467 _TEXT	
  J2 . . . . . . . . . . . . . .	L Near	 0000047F _TEXT	
isValidPlace . . . . . . . . . .	P Near	 000004F3 _TEXT	Length= 0000006E Public STDCALL
  J1 . . . . . . . . . . . . . .	L Near	 0000055C _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000852 _TEXT	Length= 00000055 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 0000085A _TEXT	
  J1 . . . . . . . . . . . . . .	L Near	 0000086B _TEXT	
  J2 . . . . . . . . . . . . . .	L Near	 0000087C _TEXT	
printHorizontalLine  . . . . . .	P Near	 00000301 _TEXT	Length= 0000002A Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 0000031C _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
N  . . . . . . . . . . . . . . .	Byte	 00000000 _DATA	
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
bool1  . . . . . . . . . . . . .	Byte	 00000705 _DATA	
bool2  . . . . . . . . . . . . .	Byte	 00000706 _DATA	
bool4  . . . . . . . . . . . . .	Byte	 00000708 _DATA	
bool5  . . . . . . . . . . . . .	Byte	 00000709 _DATA	
bool6  . . . . . . . . . . . . .	Byte	 0000070A _DATA	
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
end_msg  . . . . . . . . . . . .	Byte	 0000070B _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
filehandle . . . . . . . . . . .	DWord	 000008FC _DATA	
filename . . . . . . . . . . . .	Byte	 000008F1 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
gridcopy . . . . . . . . . . . .	Byte	 00000056 _DATA	
gridgame_tmp . . . . . . . . . .	Byte	 000000A7 _DATA	
grid . . . . . . . . . . . . . .	Byte	 00000005 _DATA	
horizontal . . . . . . . . . . .	Byte	 000007D6 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
mbool3 . . . . . . . . . . . . .	Byte	 00000707 _DATA	
mesg . . . . . . . . . . . . . .	Byte	 0000072F _DATA	
msg2 . . . . . . . . . . . . . .	Byte	 0000076B _DATA	
msg3 . . . . . . . . . . . . . .	Byte	 0000077A _DATA	
msg4 . . . . . . . . . . . . . .	Byte	 00000787 _DATA	
msg5 . . . . . . . . . . . . . .	Byte	 0000079A _DATA	
msg6 . . . . . . . . . . . . . .	Byte	 000007B0 _DATA	
msg7 . . . . . . . . . . . . . .	Byte	 000007C2 _DATA	
msgg . . . . . . . . . . . . . .	Byte	 000007F6 _DATA	
msg  . . . . . . . . . . . . . .	Byte	 00000744 _DATA	
multiplespace  . . . . . . . . .	Byte	 000007CF _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
rowmsg . . . . . . . . . . . . .	Byte	 000007DA _DATA	
sc_msg . . . . . . . . . . . . .	Byte	 000008DC _DATA	
score  . . . . . . . . . . . . .	DWord	 00000001 _DATA	
space  . . . . . . . . . . . . .	Byte	 000007CD _DATA	
st_msg1  . . . . . . . . . . . .	Byte	 00000811 _DATA	
st_msg2  . . . . . . . . . . . .	Byte	 00000822 _DATA	
st_msg3  . . . . . . . . . . . .	Byte	 00000862 _DATA	
st_msg4  . . . . . . . . . . . .	Byte	 0000087C _DATA	
st_msg5  . . . . . . . . . . . .	Byte	 0000089E _DATA	
st_msg6  . . . . . . . . . . . .	Byte	 000008AC _DATA	
vertical . . . . . . . . . . . .	Byte	 000007D3 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
